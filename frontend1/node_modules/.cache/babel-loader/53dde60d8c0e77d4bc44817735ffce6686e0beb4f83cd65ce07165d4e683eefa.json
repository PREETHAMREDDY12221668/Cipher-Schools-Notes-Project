{"ast":null,"code":"var _jsxFileName = \"D:\\\\sem 4\\\\cipherschools\\\\project\\\\frontend\\\\src\\\\components\\\\cards\\\\note\\\\index.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import styles from './note.module.scss';\n// import formatDate from '../../../utils/formatDate';\n// import Button from '../../atoms/button';\n\n// import { useNavigate } from 'react-router-dom';\n// import utils from '../../../utils/localstorage';\n// import { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function Note(props) {\n//     const { text, date, color } = props;\n//     const [expand, setExpand] = useState(false);\n//     const [noteText, setNoteText] = useState(text || '');\n//     const navigate = useNavigate();\n//     const authToken = utils.getFromLocalStorage('auth_key');\n\n//     const handleSave = () => {\n\n//         if (!authToken) {\n//             toast.error(\"Unauthorized access!\");\n//             return;\n//         }\n//         if (!noteText.length || noteText.split(' ').length < 2) {\n//             toast.error(\"Note should contain at least two words\");\n//             return;\n//         }\n//         fetch(\"http://localhost:3001/api/notes\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 authorization: authToken,\n//             },\n//             body: JSON.stringify({\n//                 text: noteText,\n//                 color\n//             })\n//         })\n//         .then((res) => res.json())\n//         .then((data) => {\n//             console.log({ data });\n//             if (data?.success===200) {\n//                 toast.success(\"New note created successfully\");\n//             } else {\n//                 toast.error(data?.message);\n//             }\n//         })\n//         .catch(error => {\n//             console.log({ error });\n//             toast.error(\"Something went wrong\");\n//         });\n\n//     };\n\n//     return (\n//         <article className={styles.container} style={{ backgroundColor: color }}>\n\n//             <div className={`${styles.content}`}>\n//                 {text === \"Create New Note...\"? (\n//                     <textarea \n//                         value={noteText} \n//                         className={styles.textarea}\n//                         onChange={(e) => setNoteText(e.target.value)}\n//                     />\n//                 ) : (\n//                     <>\n//                         <p className={`${expand ? styles.expanded : \"\"}`}>{text}</p>\n//                         {text.length > 154 ? (\n//                             <button onClick={() => setExpand(prev => !prev)}>\n//                                 {expand ? \"Read less\" : \"Read more\"}\n//                             </button>\n//                         ) : null}\n//                     </>\n//                 )}\n//             </div>\n//             <footer className={styles.footer}>\n//                 <div>\n//                     {formatDate(date)}\n//                 </div>\n//                 {noteText===\"Create New Note...\" ? (\n//                     <Button \n//                         text={'save'} \n//                         className={styles.saveBtn}\n//                         handleclick={handleupdate}\n//                     />\n//                 ) : <Button \n//                 text={'Update'}  \n//                 className={styles.saveBtn}\n//                 handleclick={handleSave}\n//             />}\n//             </footer>\n//         </article>\n//     );\n// }\n\n// export default Note;\n\nimport React, { useState } from 'react';\nimport styles from './note.module.scss';\nimport formatDate from '../../../utils/formatDate';\nimport Button from '../../atoms/button';\nimport { useNavigate } from 'react-router-dom';\nimport utils from '../../../utils/localstorage';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Note(props) {\n  _s();\n  const {\n    key,\n    text,\n    date,\n    color\n  } = props;\n  const [expand, setExpand] = useState(false);\n  const [noteText, setNoteText] = useState(text || '');\n  const navigate = useNavigate();\n  const authToken = utils.getFromLocalStorage('auth_key');\n  const handleSave = () => {\n    if (!authToken) {\n      toast.error(\"Unauthorized access!\");\n      return;\n    }\n    if (!noteText.length || noteText.split(' ').length < 2) {\n      toast.error(\"Note should contain at least two words\");\n      return;\n    }\n    const url = text === \"Create New Note...\" ? \"http://localhost:3001/api/notes\" : `http://localhost:3001/api/notes/${id}`;\n    const method = text === \"Create New Note...\" ? 'POST' : 'PATCH';\n    fetch(url, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        authorization: authToken\n      },\n      body: JSON.stringify({\n        text: noteText,\n        color\n      })\n    }).then(res => res.json()).then(data => {\n      console.log({\n        data\n      });\n      if ((data === null || data === void 0 ? void 0 : data.success) === 200) {\n        toast.success(text === \"Create New Note...\" ? \"New note created successfully\" : \"Note updated successfully\");\n        navigate('/notes'); // Optionally, navigate to the notes page after saving/updating\n      } else {\n        toast.error(data === null || data === void 0 ? void 0 : data.message);\n      }\n    }).catch(error => {\n      console.log({\n        error\n      });\n      toast.error(\"Something went wrong\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.container,\n    style: {\n      backgroundColor: color\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.content}`,\n      children: text === \"Create New Note...\" ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: noteText,\n        className: styles.textarea,\n        onChange: e => setNoteText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: `${expand ? styles.expanded : \"\"}`,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this), text.length > 154 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setExpand(prev => !prev),\n          children: expand ? \"Read less\" : \"Read more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: styles.footer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: formatDate(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: text === \"Create New Note...\" ? 'Save' : 'Update',\n        className: styles.saveBtn,\n        handleclick: handleSave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n}\n_s(Note, \"6VyQvLJ0SoRZZoBLr03xxI2lHic=\", false, function () {\n  return [useNavigate];\n});\n_c = Note;\nexport default Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","useState","styles","formatDate","Button","useNavigate","utils","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","Note","props","_s","key","text","date","color","expand","setExpand","noteText","setNoteText","navigate","authToken","getFromLocalStorage","handleSave","error","length","split","url","id","method","fetch","headers","authorization","body","JSON","stringify","then","res","json","data","console","log","success","message","catch","className","container","style","backgroundColor","children","content","value","textarea","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","expanded","onClick","prev","footer","saveBtn","handleclick","_c","$RefreshReg$"],"sources":["D:/sem 4/cipherschools/project/frontend/src/components/cards/note/index.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import styles from './note.module.scss';\r\n// import formatDate from '../../../utils/formatDate';\r\n// import Button from '../../atoms/button';\r\n\r\n// import { useNavigate } from 'react-router-dom';\r\n// import utils from '../../../utils/localstorage';\r\n// import { toast } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n\r\n// function Note(props) {\r\n//     const { text, date, color } = props;\r\n//     const [expand, setExpand] = useState(false);\r\n//     const [noteText, setNoteText] = useState(text || '');\r\n//     const navigate = useNavigate();\r\n//     const authToken = utils.getFromLocalStorage('auth_key');\r\n    \r\n//     const handleSave = () => {\r\n        \r\n//         if (!authToken) {\r\n//             toast.error(\"Unauthorized access!\");\r\n//             return;\r\n//         }\r\n//         if (!noteText.length || noteText.split(' ').length < 2) {\r\n//             toast.error(\"Note should contain at least two words\");\r\n//             return;\r\n//         }\r\n//         fetch(\"http://localhost:3001/api/notes\", {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//                 authorization: authToken,\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 text: noteText,\r\n//                 color\r\n//             })\r\n//         })\r\n//         .then((res) => res.json())\r\n//         .then((data) => {\r\n//             console.log({ data });\r\n//             if (data?.success===200) {\r\n//                 toast.success(\"New note created successfully\");\r\n//             } else {\r\n//                 toast.error(data?.message);\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             console.log({ error });\r\n//             toast.error(\"Something went wrong\");\r\n//         });\r\n\r\n\r\n\r\n//     };\r\n\r\n    \r\n\r\n//     return (\r\n//         <article className={styles.container} style={{ backgroundColor: color }}>\r\n           \r\n//             <div className={`${styles.content}`}>\r\n//                 {text === \"Create New Note...\"? (\r\n//                     <textarea \r\n//                         value={noteText} \r\n//                         className={styles.textarea}\r\n//                         onChange={(e) => setNoteText(e.target.value)}\r\n//                     />\r\n//                 ) : (\r\n//                     <>\r\n//                         <p className={`${expand ? styles.expanded : \"\"}`}>{text}</p>\r\n//                         {text.length > 154 ? (\r\n//                             <button onClick={() => setExpand(prev => !prev)}>\r\n//                                 {expand ? \"Read less\" : \"Read more\"}\r\n//                             </button>\r\n//                         ) : null}\r\n//                     </>\r\n//                 )}\r\n//             </div>\r\n//             <footer className={styles.footer}>\r\n//                 <div>\r\n//                     {formatDate(date)}\r\n//                 </div>\r\n//                 {noteText===\"Create New Note...\" ? (\r\n//                     <Button \r\n//                         text={'save'} \r\n//                         className={styles.saveBtn}\r\n//                         handleclick={handleupdate}\r\n//                     />\r\n//                 ) : <Button \r\n//                 text={'Update'}  \r\n//                 className={styles.saveBtn}\r\n//                 handleclick={handleSave}\r\n//             />}\r\n//             </footer>\r\n//         </article>\r\n//     );\r\n// }\r\n\r\n// export default Note;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport styles from './note.module.scss';\r\nimport formatDate from '../../../utils/formatDate';\r\nimport Button from '../../atoms/button';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport utils from '../../../utils/localstorage';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction Note(props) {\r\n    const { key, text, date, color } = props;\r\n    const [expand, setExpand] = useState(false);\r\n    const [noteText, setNoteText] = useState(text || '');\r\n    const navigate = useNavigate();\r\n    const authToken = utils.getFromLocalStorage('auth_key');\r\n\r\n    const handleSave = () => {\r\n        if (!authToken) {\r\n            toast.error(\"Unauthorized access!\");\r\n            return;\r\n        }\r\n        if (!noteText.length || noteText.split(' ').length < 2) {\r\n            toast.error(\"Note should contain at least two words\");\r\n            return;\r\n        }\r\n\r\n        const url = text === \"Create New Note...\"\r\n            ? \"http://localhost:3001/api/notes\"\r\n            : `http://localhost:3001/api/notes/${id}`;\r\n        const method = text === \"Create New Note...\" ? 'POST' : 'PATCH';\r\n\r\n        fetch(url, {\r\n            method,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                authorization: authToken,\r\n            },\r\n            body: JSON.stringify({\r\n                text: noteText,\r\n                color\r\n            })\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n            console.log({ data });\r\n            if (data?.success === 200) {\r\n                toast.success(text === \"Create New Note...\" ? \"New note created successfully\" : \"Note updated successfully\");\r\n                navigate('/notes'); // Optionally, navigate to the notes page after saving/updating\r\n            } else {\r\n                toast.error(data?.message);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log({ error });\r\n            toast.error(\"Something went wrong\");\r\n        });\r\n    };\r\n\r\n    return (\r\n        <article className={styles.container} style={{ backgroundColor: color }}>\r\n            <div className={`${styles.content}`}>\r\n                {text === \"Create New Note...\" ? (\r\n                    <textarea \r\n                        value={noteText} \r\n                        className={styles.textarea}\r\n                        onChange={(e) => setNoteText(e.target.value)}\r\n                    />\r\n                ) : (\r\n                    <>\r\n                        <p className={`${expand ? styles.expanded : \"\"}`}>{text}</p>\r\n                        {text.length > 154 ? (\r\n                            <button onClick={() => setExpand(prev => !prev)}>\r\n                                {expand ? \"Read less\" : \"Read more\"}\r\n                            </button>\r\n                        ) : null}\r\n                    </>\r\n                )}\r\n            </div>\r\n            <footer className={styles.footer}>\r\n                <div>{formatDate(date)}</div>\r\n                <Button \r\n                    text={text === \"Create New Note...\" ? 'Save' : 'Update'} \r\n                    className={styles.saveBtn}\r\n                    handleclick={handleSave}\r\n                />\r\n            </footer>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Note;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}